{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/transaction.js","webpack:///./js/updating.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"0HAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACPF,EAAQF,KACTA,OAILK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GCdjB,IAIMK,EAAkB,SAAAC,GAEpB,OAAO,IAAIV,SAAQ,SAACC,EAASC,GACzB,IAP2BS,EAAKC,EAO1Bd,GAPqBa,EAOa,IAPRC,EAOa,IAN1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOhDR,YAAW,WACYU,KAAKE,SAAW,GAE/Bd,EAAQ,CAAEe,GAAIN,EAAYM,GAAIX,KAAMP,IAEpCI,EAAOQ,EAAYM,MAExBlB,OAILmB,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIX,EAAW,EAAXA,KACtBC,QAAQC,IAAR,eAA2BS,EAA3B,iBAA8CX,EAA9C,OAGEa,EAAW,SAAAF,GACbV,QAAQa,KAAR,gCAA6CH,EAA7C,8BAGJP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BZ,KAAKS,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BZ,KAAKS,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC7BZ,KAAKS,GACLI,MAAMH,GAEXT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC7BZ,KAAKS,GACLI,MAAMH,G,kCCzCLI,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAI3B,SAAQ,SAACC,GAIhBA,EAHqByB,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA6BE,EAA7B,CAAmCL,QAASK,EAAKL,SAAWK,UAMlEzB,EAAS,SAAA0B,GAAY,OAAIxB,QAAQyB,MAAMD,IAE7CL,EAAgBH,EAAO,SAASd,KAAKJ,GACrCqB,EAAgBH,EAAO,OAAOd,KAAKJ,K","file":"main.88fc086f22273ea2e7b0.js","sourcesContent":["const delay = ms => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(ms)\r\n        }, ms)\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Виклич функції для перевірки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? {...user, active: !user.active } : user,\r\n        )\r\n        resolve(updatedUsers)\r\n    })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}